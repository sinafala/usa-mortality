regions <- Sys.glob(paste(eval(data.dir),"/*",sep=""))
# initialize life tables list
lts <- list()
# initialize total life tables count
lts.tot <- 0
# loop over the regions
for (region in regions) {
# get the subregions
subregions <- Sys.glob(paste(eval(region),"/*",sep=""))
# loop over subregions
for (subregion in subregions) {
# get the names of the CSV files
csvs <- Sys.glob(paste(eval(subregion),"/*_",age.period,".csv",sep=""))
# loop over the CSV files
for (csv in csvs) {
# save the region, subregion, and sex
region <- basename(eval(region))
sub.region <- basename(eval(subregion))
# retrieve the sex from the CSV file name
sex <- str_sub(str_split(eval(csv),"_")[[1]][2],1,1)
# read the life tables from the CSV, all of them
lts.long <- read_csv(eval(csv),col_types=cols())
# calculate how many life tables there are
lts.num <- dim(lts.long)[1]/ages
# loop ver the life tables
for (lt in 1:lts.num) {
# store the begin and end rows for this life table
row.begin <- (lt*ages)-(ages-1)
row.end <- lt*ages
# store the period for this life table
period <- paste("per.",lts.long[row.begin,3],sep="")
# finally read this life table and store it in the list
lts[[region]][[sub.region]][[sex]][[period]] <- lts.long[(row.begin:row.end),]
# increment total life tables count
lts.tot <- lts.tot+1
}
}
}
}
return <- list(
lts = lts,
age = age,
lts.read = lts.tot
)
}
#############################################################
# function to extract a specified column from all life tables
#   and store the results in a single numeric matrix
#############################################################
extractLtCol <- function (lts.list,sex,col.name) {
# lts.list is a list object returned by the function readUsaLts()
# sex is sex to be retrieved:
#   'b'
#   'f'
#   'm'
# colname name of column to be retrieved and stored in a matrix:
#   'popname'
#   'sex'
#   'year'
#   'age'
#   'mx'
#   'qx'
#   'ax'
#   'lx'
#   'dx'
#   'Lx'
#   'Tx'
#   'ex'
# return: a numeric age by life table matrix containing values
#   from the desired column, e.g. a matrix containing the qx
#   columns from all the life tables of the specified sex
# set the number of age groups
if (lts.list$age == 1) {
ages <- 111
} else if (lts.list$age == 5) {
ages <- 24
} else {
# stop if invalid age
stop("Invalid 'age' argument")
}
# set the column number of the desired column
if (col.name == "popname") {
col <- 1
} else if (col.name == "sex") {
col <- 2
} else if (col.name == "year") {
col <- 3
} else if (col.name == "age") {
col <- 4
} else if (col.name == "mx") {
col <- 5
} else if (col.name == "qx") {
col <- 6
} else if (col.name == "ax") {
col <- 7
} else if (col.name == "lx") {
col <- 8
} else if (col.name == "dx") {
col <- 9
} else if (col.name == "Lx") {
col <- 10
} else if (col.name == "Tx") {
col <- 11
} else if (col.name == "ex") {
col <- 12
} else {
col <- NA
}
# extract the life tables from the input list
lts <- lts.list$lts
# store the number of life tables for one sex (sexes={"f","m","b"})
lts.count <- lts.list$lts.read/3
# initilize the output matrix
if (col > 4) {
# zeroes for numeric columns
lts.colmat <- matrix(data=rep(0,ages*lts.count),nrow=ages,ncol=lts.count)
} else {
# empty strings for character columns
lts.colmat <- matrix(data=rep("",ages*lts.count),nrow=ages,ncol=lts.count)
}
# initialize the output matrix column names vector
col.names <- rep("",lts.count)
# initialize output matrix column counter
col.index <- 1
# loop over regions
for (region in 1:length(lts)) {
# loop over subregions
for (subregion in 1:length(lts[[region]])) {
# loop over periods
for (period in 1:length(lts[[region]][[subregion]][[sex]])) {
# store the desired column in the output matrix
if (col > 4) {
# numeric columns
lts.colmat[,col.index] <- as.numeric(unlist(lts[[region]][[subregion]][[sex]][[period]][,col]))
} else {
# character columns
lts.colmat[,col.index] <- as.character(unlist(lts[[region]][[subregion]][[sex]][[period]][,col]))
}
# store the region, subregion, sex, and period
region.chr <- names(lts)[region]
subregion.chr <- names(lts[[region]])[subregion]
# keep just the period part of the period name
period.chr <- str_sub(names(lts[[region]][[subregion]][[sex]])[period],5)
# add the column identifier for the output matrix to the list vector of column names
col.names[col.index] <- paste(region.chr,subregion.chr,sex,period.chr,sep=".")
# increment the output matrix column counter
col.index <- col.index + 1
}
# }
}
}
# name the columns of the output matrix
colnames(lts.colmat) <- col.names
# set the output matrix row names to the age groups
rownames(lts.colmat) <- unlist(lts[[1]][[1]][[1]][[1]][,4])
# return the output matrix
return(lts.colmat)
}
# WARNING: contents of the directory './example-data' in your working directory
#   will be removed
# delete directory './example-data'
unlink("./example-data",recursive=TRUE)
# create empty directory './example-data'
dir.create("./example-data")
# download the usa mortality zip file
output.file <- "./example-data/USA-lifetables.zip"
unzip.dir <- "./example-data"
usa.user <- "<usa.mortality.org user name>"
usa.pass <- "<usa.mortality.org password>"
usa.lts.download <- download.usa(output.file,unzip.dir,usa.user,usa.pass)
# parse the raw 1x1 (single year of age and single calendar year) life tables into a list
age.period <- "1x1"
data.dir <- "./example-data/lifetables"
usa.lts <- readUsaLts(age.period,data.dir)
# explore resulting list a little
# number of life tables read
usa.lts$lts.read
# age aggregation, 1 -> single year in age
usa.lts$age
# extract the life tables list
lts <- usa.lts$lts
# explore the life tables list a little
names(lts)
names(lts$States)
names(lts$States$AK)
names(lts$States$AK$b)
names(lts$States$AK$b$per.1959)
# finally a life table: Arkansas 1959, both sexes
lts$States$AK$b$per.1959
# California 2010, female
lts$States$CA$f$per.2010
# dimensions of California 2010, female
dim(lts$States$CA$f$per.2010)
# have a look at California 2010, female
View(lts$States$AK$b$per.2015)
# clear things out
rm(list=ls())
# install required packages that may not be installed now
list.of.packages <- c(
"readr",
"stringr",
"httr"
)
# identify required packages that are not already installed
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
# install required packages that are not already installed
if(length(new.packages)) install.packages(new.packages)
# load necessary packages
lapply(list.of.packages, require, character.only = TRUE)
##########################################################
# function to download zip file containing USA life tables
##########################################################
download.usa <- function (output.file,unzip.dir,usa.user,usa.pass) {
# output.file is name of file to be created when the zip file is unzipped
# unzip.dir is the directory where you want to put that file
# usa.user is your usa.mortality.org user name
# usa.pass is you usa.mortality.org password
# return: a list describing various aspects of an attempted download
url <- "https://usa.mortality.org/uploads/lifetables/lifetables.zip"
print("Downloading USA ...")
usa.zip <- try(GET(
url,authenticate(usa.user,usa.pass)
,write_disk(output.file,overwrite=TRUE)
,progress(),show.error.messages=FALSE
))
if(class(usa.zip)=="try-error") {
return(usa.zip)
stop(attributes(usa.zip)$condition)
} else if (http_status(usa.zip)$category=="Client error") {
if(http_status(usa.zip)$message=="Client error: (401) Unauthorized") {
return(usa.zip)
stop("Check user name and password and try again.")
} else {
return(usa.zip)
stop(http_status(usa.zip)$message)
}
}
unzip(zipfile=output.file,exdir=unzip.dir)
return(usa.zip)
}
##########################################
# function to read life tables into a list
##########################################
readUsaLts <- function(age.period,data.dir) {
# age.period is the agexperiod aggregation you want, e.g. '1x1' or '5x5'
# data.dir is the directory where you unzipped the zip file downloaded from usa.mortality.org
# return: a list containing
#   lts, the life tables in a list
#   age, the age aggregation you input, e.g. '1' or '5'
#   lts.read, the total life tables read
# extract the age identifier from the age.period argument
age <- str_sub(age.period,1,1)
# set the number of age groups
if (age=="1") {
ages <- 111
} else if (age=="5") {
ages <- 24
} else {
# stop age not '1' or '5'
stop("Invalid 'age.period' argument")
}
# get the regions in the data directory
regions <- Sys.glob(paste(eval(data.dir),"/*",sep=""))
# initialize life tables list
lts <- list()
# initialize total life tables count
lts.tot <- 0
# loop over the regions
for (region in regions) {
# get the subregions
subregions <- Sys.glob(paste(eval(region),"/*",sep=""))
# loop over subregions
for (subregion in subregions) {
# get the names of the CSV files
csvs <- Sys.glob(paste(eval(subregion),"/*_",age.period,".csv",sep=""))
# loop over the CSV files
for (csv in csvs) {
# save the region, subregion, and sex
region <- basename(eval(region))
sub.region <- basename(eval(subregion))
# retrieve the sex from the CSV file name
sex <- str_sub(str_split(eval(csv),"_")[[1]][2],1,1)
# read the life tables from the CSV, all of them
lts.long <- read_csv(eval(csv),col_types=cols())
# calculate how many life tables there are
lts.num <- dim(lts.long)[1]/ages
# loop ver the life tables
for (lt in 1:lts.num) {
# store the begin and end rows for this life table
row.begin <- (lt*ages)-(ages-1)
row.end <- lt*ages
# store the period for this life table
period <- paste("per.",lts.long[row.begin,3],sep="")
# finally read this life table and store it in the list
lts[[region]][[sub.region]][[sex]][[period]] <- lts.long[(row.begin:row.end),]
# increment total life tables count
lts.tot <- lts.tot+1
}
}
}
}
return <- list(
lts = lts,
age = age,
lts.read = lts.tot
)
}
#############################################################
# function to extract a specified column from all life tables
#   and store the results in a single numeric matrix
#############################################################
extractLtCol <- function (lts.list,sex,col.name) {
# lts.list is a list object returned by the function readUsaLts()
# sex is sex to be retrieved:
#   'b'
#   'f'
#   'm'
# colname name of column to be retrieved and stored in a matrix:
#   'popname'
#   'sex'
#   'year'
#   'age'
#   'mx'
#   'qx'
#   'ax'
#   'lx'
#   'dx'
#   'Lx'
#   'Tx'
#   'ex'
# return: a numeric age by life table matrix containing values
#   from the desired column, e.g. a matrix containing the qx
#   columns from all the life tables of the specified sex
# set the number of age groups
if (lts.list$age == 1) {
ages <- 111
} else if (lts.list$age == 5) {
ages <- 24
} else {
# stop if invalid age
stop("Invalid 'age' argument")
}
# set the column number of the desired column
if (col.name == "popname") {
col <- 1
} else if (col.name == "sex") {
col <- 2
} else if (col.name == "year") {
col <- 3
} else if (col.name == "age") {
col <- 4
} else if (col.name == "mx") {
col <- 5
} else if (col.name == "qx") {
col <- 6
} else if (col.name == "ax") {
col <- 7
} else if (col.name == "lx") {
col <- 8
} else if (col.name == "dx") {
col <- 9
} else if (col.name == "Lx") {
col <- 10
} else if (col.name == "Tx") {
col <- 11
} else if (col.name == "ex") {
col <- 12
} else {
col <- NA
}
# extract the life tables from the input list
lts <- lts.list$lts
# store the number of life tables for one sex (sexes={"f","m","b"})
lts.count <- lts.list$lts.read/3
# initilize the output matrix
if (col > 4) {
# zeroes for numeric columns
lts.colmat <- matrix(data=rep(0,ages*lts.count),nrow=ages,ncol=lts.count)
} else {
# empty strings for character columns
lts.colmat <- matrix(data=rep("",ages*lts.count),nrow=ages,ncol=lts.count)
}
# initialize the output matrix column names vector
col.names <- rep("",lts.count)
# initialize output matrix column counter
col.index <- 1
# loop over regions
for (region in 1:length(lts)) {
# loop over subregions
for (subregion in 1:length(lts[[region]])) {
# loop over periods
for (period in 1:length(lts[[region]][[subregion]][[sex]])) {
# store the desired column in the output matrix
if (col > 4) {
# numeric columns
lts.colmat[,col.index] <- as.numeric(unlist(lts[[region]][[subregion]][[sex]][[period]][,col]))
} else {
# character columns
lts.colmat[,col.index] <- as.character(unlist(lts[[region]][[subregion]][[sex]][[period]][,col]))
}
# store the region, subregion, sex, and period
region.chr <- names(lts)[region]
subregion.chr <- names(lts[[region]])[subregion]
# keep just the period part of the period name
period.chr <- str_sub(names(lts[[region]][[subregion]][[sex]])[period],5)
# add the column identifier for the output matrix to the list vector of column names
col.names[col.index] <- paste(region.chr,subregion.chr,sex,period.chr,sep=".")
# increment the output matrix column counter
col.index <- col.index + 1
}
# }
}
}
# name the columns of the output matrix
colnames(lts.colmat) <- col.names
# set the output matrix row names to the age groups
rownames(lts.colmat) <- unlist(lts[[1]][[1]][[1]][[1]][,4])
# return the output matrix
return(lts.colmat)
}
# WARNING: contents of the directory './example-data' in your working directory
#   will be removed
# delete directory './example-data'
unlink("./example-data",recursive=TRUE)
# create empty directory './example-data'
dir.create("./example-data")
# download the usa mortality zip file
output.file <- "./example-data/USA-lifetables.zip"
unzip.dir <- "./example-data"
usa.user <- "<usa.mortality.org user name>"
usa.pass <- "<usa.mortality.org password>"
# download the usa mortality zip file
output.file <- "./example-data/USA-lifetables.zip"
unzip.dir <- "./example-data"
usa.user <- "sam@samclark.net"
usa.pass <- "neuQ^i7,7n^Nx8uEDY*2"
usa.lts.download <- download.usa(output.file,unzip.dir,usa.user,usa.pass)
# parse the raw 1x1 (single year of age and single calendar year) life tables into a list
age.period <- "1x1"
data.dir <- "./example-data/lifetables"
usa.lts <- readUsaLts(age.period,data.dir)
# explore resulting list a little
# number of life tables read
usa.lts$lts.read
# age aggregation, 1 -> single year in age
usa.lts$age
# extract the life tables list
lts <- usa.lts$lts
# explore the life tables list a little
names(lts)
names(lts$States)
names(lts$States$AK)
names(lts$States$AK$b)
names(lts$States$AK$b$per.1959)
# finally a life table: Arkansas 1959, both sexes
lts$States$AK$b$per.1959
# California 2010, female
lts$States$CA$f$per.2010
# dimensions of California 2010, female
dim(lts$States$CA$f$per.2010)
# have a look at California 2010, female
View(lts$States$AK$b$per.2015)
# extract the qx column from all the both-sex life tables and store them in a matrix
qx.b <- extractLtCol(usa.lts,"b","qx")
# have a look at the dimensions of the resulting matrix
dim(qx.b)
# have a look at the first few columns
View(qx.b[,1:5])
# just USA national life tables
area <- "USA"
area.cols <- grepl(area,colnames(qx.b))
qx.b.usa <- qx.b[,area.cols]
colnames(qx.b.usa)
dim(qx.b.usa)
View(qx.b.usa)
# just Ohio state life tables
area <- "OH"
area.cols <- grepl(area,colnames(qx.b))
qx.b.oh <- qx.b[,area.cols]
colnames(qx.b.oh)
dim(qx.b.oh)
View(qx.b.oh)
# another example: get female, 5-year, California life expectancies from 5-year age group life tables
# parse 5x5 life tables
age.period <- "5x5"
data.dir <- "./example-data/lifetables"
usa.lts.5x5 <- readUsaLts(age.period,data.dir)
usa.lts.5x5$age
usa.lts.5x5$lts.read
# extract ex for f
ex.f <- extractLtCol(usa.lts,"f","ex")
dim(ex.f)
# select California life expecancies
area <- "CA"
area.cols <- grepl(area,colnames(ex.f))
e0.f.ca <- ex.f[1,area.cols]
names(e0.f.ca)
length(e0.f.ca)
# plot California female e0s
plot(e0.f.ca,xaxt="n")
axis(1, at=seq(1,57,1),label=seq(1959,2015,1),las=2)
# save the Ohio qxs in a file on disk
save(qx.b.oh,file="./example-data/qxOh.rda")
# read them
rm(list="qx.b.oh")
load(file="./example-data/qxOh.rda")
# save the whole list of life tables
save(usa.lts,file="./example-data/usaLtsList.rda")
rm(list="usa.lts")
load(file="./example-data/usaLtsList.rda")
names(usa.lts)
source('~/.active-rstudio-document')
